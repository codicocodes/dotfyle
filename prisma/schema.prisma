// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  avatarUrl     String
  githubId      Int            @unique
  githubToken   GithubToken?
  neovimConfigs NeovimConfig[]
  createdAt     DateTime       @default(now())
}

model GithubToken {
  id          Int      @id @default(autoincrement())
  accessToken String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int      @unique
  createdAt   DateTime @default(now())
}

model NeovimConfig {
  id                   Int                  @id @default(autoincrement())
  owner                String
  slug                 String
  repo                 String
  root                 String               @default("")
  initFile             String
  branch               String
  leaderkey            String               @default("unknown")
  fork                 Boolean
  githubId             Int
  stars                Int
  user                 User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               Int
  pluginManager        NeovimPluginManager?
  createdAt            DateTime             @default(now())
  lastSyncedAt         DateTime             @default(now())
  dotfyleShieldAddedAt DateTime?

  linesOfCode Int @default(0)

  neovimConfigPlugins    NeovimConfigPlugins[]
  languageServerMappings NeovimConfigToLanguageServer[]
  syncs                  NeovimConfigSync[]

  @@unique([owner, repo, root])
  @@unique([owner, slug])
  @@unique([id, userId])
}

enum NeovimPluginManager {
  Lazy
  Packer
}

model NeovimPlugin {
  id                   Int       @id @default(autoincrement())
  owner                String
  name                 String
  type                 String
  source               String
  category             String
  link                 String
  description          String    @default("")
  shortDescription     String
  createdAt            DateTime  @default(now())
  readme               String    @default("")
  dotfyleShieldAddedAt DateTime?
  stars                Int       @default(0)

  neovimConfigPlugins NeovimConfigPlugins[]

  lastSyncedAt  DateTime?
  addedLastWeek Int       @default(0)

  breakChanges BreakingChange[]

  media Media[]

  installInstructions NeovimPluginInstallInstructions[]

  @@unique([owner, name])
}

model NeovimPluginInstallInstructions {
  id            Int          @id @default(autoincrement())
  plugin        NeovimPlugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  pluginId      Int
  pluginManager String
  instructions  String

  @@unique([pluginId, pluginManager])
}

model LanguageServer {
  name           String
  configMappings NeovimConfigToLanguageServer[]

  @@id([name])
  @@unique([name])
}

model NeovimConfigToLanguageServer {
  languageServer     LanguageServer    @relation(fields: [languageServerName], references: [name], onDelete: Cascade)
  languageServerName String
  config             NeovimConfig      @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId           Int
  sync               NeovimConfigSync? @relation(fields: [configId, sha], references: [configId, sha])
  sha                String

  @@id([languageServerName, configId])
}

model NeovimConfigPlugins {
  config    NeovimConfig      @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId  Int
  plugin    NeovimPlugin      @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  pluginId  Int
  createdAt DateTime          @default(now())
  sync      NeovimConfigSync? @relation(fields: [sha, configId], references: [sha, configId], onDelete: Cascade)
  sha       String?
  paths     String            @default("")

  @@id([configId, pluginId])
}

model NeovimConfigSync {
  sha                   String
  syncedAt              DateTime                       @default(now())
  syncedPlugins         NeovimConfigPlugins[]
  syncedLanguageServers NeovimConfigToLanguageServer[]
  config                NeovimConfig                   @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId              Int

  @@id([configId, sha])
  @@unique([sha, configId])
}

model Post {
  id             String          @id @default(uuid())
  title          String
  text           String
  type           String
  breakingChange BreakingChange?
  createdAt      DateTime        @default(now())
}

model TwinPost {
  title       String
  issue       Int       @id @unique
  createdAt   DateTime  @default(now())
  publishedAt DateTime? @default(now())
  content     String
  license     String?
}

model BreakingChange {
  id          Int          @id @default(autoincrement())
  post        Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String       @unique
  plugin      NeovimPlugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  pluginId    Int
  externalUrl String       @unique
  sha         String
}

model Media {
  id             Int           @id @default(autoincrement())
  url            String        @unique
  type           String        @default("")
  thumbnail      Boolean       @default(false)
  NeovimPlugin   NeovimPlugin? @relation(fields: [neovimPluginId], references: [id])
  neovimPluginId Int?
}
